<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on demo杰的博客</title>
    <link>/post/</link>
    <description>Recent content in Posts on demo杰的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Jun 2019 21:25:15 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Markdown基本语法</title>
      <link>/post/markdown_grammar/</link>
      <pubDate>Tue, 11 Jun 2019 21:25:15 +0800</pubDate>
      
      <guid>/post/markdown_grammar/</guid>
      <description>Markdown基本语法 Markdown基础语法(官方教程)：https://www.markdownguide.org/basic-syntax/
一、标题 支持六级标题
示例：
# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题  效果如下：
这是一级标题 这是二级标题 这是三级标题 这是四级标题 这是五级标题 这是六级标题 二、字体  斜体   使用一个星号：&amp;rdquo;*&amp;ldquo;，星号与文字之间不要有空格
 加粗   使用两个星号：&amp;rdquo;**&amp;rdquo;
 斜体加粗   使用三个星号：&amp;rdquo;***&amp;rdquo;
 删除线   使用两个阔折号：&amp;rdquo;~~&amp;rdquo;
**`示例：`** ``` **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ ``` **`效果如下：`** **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~  换行  末尾输入两个空格 使用HTML的&amp;lt;br&amp;gt;标签 换两行。注意，这种应该叫新段落，因为行间距比普通的换行大  首行缩进  使用特殊占位符
注意：不同的占位符所占空白大小不一样</description>
    </item>
    
    <item>
      <title>《敏捷软件开发》读书笔记</title>
      <link>/post/software_design/</link>
      <pubDate>Sat, 11 May 2019 21:25:15 +0800</pubDate>
      
      <guid>/post/software_design/</guid>
      <description>《敏捷软件开发：原则、模式与实践》读书笔记 面向对象设计的原则：
SRP：单一职责原则 OCP：开放-封闭原则 LSP：Liskov替换原则 DIP：依赖倒置原则 ISP：接口隔离原则 REP：重用发布等价原则 CCP：共同封闭原则 CRP：共同重用原则 ADP：无环依赖原则 SDP：稳定依赖原则 SAP：稳定抽象原则  第 Ⅰ 部分 敏捷开发  人与人之间的交互是复杂的，并且其效果从来都难以预期，但却是工作中最为重要的方面。
——Tom Demacro 和 Timothy Lister。《人件》，第5页
原则、模式和实践都是重要的，但是使它们发挥作用的是人。
 第1章 敏捷实战 敏捷联盟宣言：
1. 个体和交互胜过过程和工具 2. 可以工作的软件胜过面面俱到的文档 3. 客户合作胜过合同谈判 4. 响应变化胜过遵循计划  原则：
1. 我们最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意。 2. 即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势。 3. 经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好。 4. 在整个项目开发期间，业务人员和开发人员必须天天都在一个工作。 5. 围绕被激励起来的个人来构建项目。给他们提供所需要的环境和支持，并且信任他们能够完成工作。 6. 在团队内部，最具有效果并且富有效率的传递信息的方式，就是面对面的交谈。 7. 工作的软件是首要的进度度量标准。 8. 敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度。 9. 不断地关注优秀的技能和好的设计会增强敏捷能力。 10.简单————是未完成的工作最大化的艺术————是根本。 11. 最好的结构、需求和设计出自于自组织的团队。 12. 每隔一定时间，团队会在如何才能更好有效地工作方面进行反省，然后相应地对自己的行为进行调整。  结论：
职业目标：给雇主和客户交付最大可能的价值。 虽然在项目中采用过程方法是出于好意的，但是膨胀的过程方法对于我们的失败至少是应该负一些责任的。 敏捷软件开发的原则和价值观构成了一个可以帮助团队打破膨胀循环的方法。 可选择的敏捷过程：SCRUM，Crystal，特征取得软件开发（Feature Driven Development，简称 FDD），自适应软件开发（Adaptive Software Development，简称 ADP），以及最重要的极限编程（eXtreme Programming，简称XP）。  第2章 极限编程概述  极限编程（eXtreme Programming，简称 XP）是敏捷方法中最著名的一个。它由一系列简单却相互以来的实践组成。这些实践结合在一个形成了一个胜于部分结合的整体。</description>
    </item>
    
  </channel>
</rss>